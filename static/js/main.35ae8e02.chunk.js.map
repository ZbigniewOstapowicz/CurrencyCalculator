{"version":3,"sources":["component/Select.jsx","component/Calculator.jsx","component/Result.jsx","component/App.jsx","serviceWorker.js","index.js"],"names":["Select","props","className","value","onChange","disabled","Calculator","content","InputErr","colSpan","currency","bid","toFixed","ask","onSubmit","BtnClick","InputChange","InputValue","placeholder","Result","exchangeRate","date","isLoading","err","App","state","handelInptChange","e","setState","target","handelClick","preventDefault","Number","handelSelect","fetch","then","r","json","data","rates","effectiveDate","catch","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35ae8e02.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../style/Select.css\";\r\nconst Select = props => {\r\n  return (\r\n    <div className=\"Select\">\r\n      <h1 className=\"Select__text\">Wybierz walute:</h1>\r\n      <select className=\"Select__select\" value={props.value} onChange={props.onChange}>\r\n        <option value=\"\" disabled>Wybierz walutę</option>\r\n        <option value=\"USD\">Dolar amreykański(USD)</option>\r\n        <option value=\"CAD\">Dolar kanadyjski(CAD)</option>\r\n        <option value=\"EUR\">Euro(EUR)</option>\r\n        <option value=\"CHF\">Frank szwajcarski(CHF)</option>\r\n        <option value=\"GBP\">Funt szterling(GBP)</option>\r\n        <option value=\"CZK\">Korona czeska(CZK)</option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React from \"react\";\r\nimport \"../style/Calculator.css\";\r\nconst Calculator = props => {\r\n  let content = \"\";\r\n  if (!props.InputErr && props.value) {\r\n    content = (\r\n      <div className=\"Calculator__result\">\r\n        <table className=\"Calculator__tabel\">\r\n          <tbody>\r\n            <tr>\r\n              <th colSpan=\"2\">\r\n                {props.value} {props.currency}\r\n              </th>\r\n            </tr>\r\n            <tr>\r\n              <td>sprzedaż za : {(props.bid * props.value).toFixed(2)} zł</td>\r\n            </tr>\r\n            <tr>\r\n              <td>kupisz za : {(props.ask * props.value).toFixed(2)} zł</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  } else if (props.value) {\r\n    content = <h5>wprowadz wartośc liczbową wieksza od 0</h5>;\r\n  }\r\n  return (\r\n    <div className=\"Calculator\">\r\n      <form onSubmit={props.BtnClick}>\r\n        <input\r\n          className=\"Calculator__input\"\r\n          onChange={props.InputChange}\r\n          value={props.InputValue}\r\n          placeholder={`Wpisz wartość w ${props.currency}`}\r\n        />\r\n        <button className=\"Calculator__btn\">Przelicz</button>\r\n      </form>\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n","import React from \"react\";\r\nimport Calculator from \"./Calculator\";\r\nimport \"../style/Result.css\";\r\n\r\n\r\nconst Result = props => {\r\n  const { currency, bid, ask, date, InputValue, InputErr, value, isLoading,err} = props.exchangeRate;\r\n\r\n  let content = \"\";\r\n  if (date&&!isLoading) {\r\n    content = (\r\n      <div className=\"Result\">\r\n        <table className=\"Result__table\">\r\n          <thead>\r\n            <tr>\r\n              <th colSpan=\"3\"> Kurs walut z dnia: {date}</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className=\"Result__tbody\">\r\n            <tr>\r\n              <th>Waluta</th>\r\n              <th>Skup</th>\r\n              <th>Sprzedaż</th>\r\n            </tr>\r\n            <tr>\r\n              <td>{currency}</td>\r\n              <td>{bid}</td>\r\n              <td>{ask}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <Calculator currency={currency} bid={bid} ask={ask} InputChange={props.InputChange} BtnClick={props.BtnClick} InputValue={InputValue} InputErr={InputErr} value={value}></Calculator>\r\n      </div>\r\n    )\r\n  }else if(!date&&isLoading){\r\n    content=(\r\n      <p>loading</p>\r\n    )\r\n  } else if(err){\r\n    content=(\r\n      <p>Błąd połączenia</p>\r\n    )\r\n  }\r\n  return content\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\r\nimport Select from \"./Select\";\r\nimport Result from \"./Result\";\r\nimport \"../style/App.css\";\r\nclass App extends Component {\r\n  state = {\r\n    currency: \"\",\r\n    bid:\"\",\r\n    ask:\"\",\r\n    date:\"\",\r\n    InputValue:\"\",\r\n    InputErr: false,\r\n    value:\"\",\r\n    isLoading: false,\r\n    err: false,\r\n\r\n  };\r\n  handelInptChange=e=>{\r\n    this.setState({\r\n      InputValue:e.target.value,\r\n\r\n    })\r\n  }\r\n\r\n  handelClick=e=>{\r\n    e.preventDefault();\r\n    if(this.state.InputValue<1||!Number(this.state.InputValue)){\r\n      this.setState({\r\n        InputValue:\"\",\r\n        InputErr: true,\r\n        value: this.state.InputValue,\r\n      })\r\n    }else{\r\n       this.setState({\r\n        value: this.state.InputValue,\r\n        InputValue:\"\",\r\n        InputErr: false\r\n      })\r\n    }\r\n\r\n  }\r\n  handelSelect = e => {\r\n    this.setState({\r\n      currency: e.target.value,\r\n       value:\"\",\r\n       isLoading:true,\r\n    });\r\n       fetch(`https://api.nbp.pl/api/exchangerates/rates/c/${e.target.value}/?format=json`).then(r=>r.json()).then(data=>{\r\n        this.setState({\r\n          bid: data.rates[0].bid,\r\n          ask: data.rates[0].ask,\r\n          date: data.rates[0].effectiveDate,\r\n          isLoading: false,\r\n        })\r\n      }).catch(err=>{\r\n        this.setState({\r\n          isLoading:false,\r\n          err:true,\r\n        })\r\n      })\r\n      \r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Select onChange={this.handelSelect} value={this.state.currency}></Select>\r\n        <Result exchangeRate={this.state} InputChange={this.handelInptChange} BtnClick={this.handelClick}></Result>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}